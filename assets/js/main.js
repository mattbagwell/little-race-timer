// Generated by CoffeeScript 1.6.3
(function() {
  var navCtrl, regCtrl, timerApp, timerCtrl;

  timerApp = angular.module('timerApp', ['ngRoute', 'LocalStorageModule', 'ngTouch', 'ngAnimate']);

  timerApp.config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/registration', {
        templateUrl: 'templates/registration.html',
        controller: 'regCtrl'
      }).when('/timer', {
        templateUrl: 'templates/timer.html',
        controller: 'timerCtrl'
      }).when('/', {
        templateUrl: 'templates/home.html'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  timerApp.factory('Runners', function(localStorageService, $http) {
    var runners;
    runners = {};
    runners.set = function(data) {
      runners = data;
      return localStorageService.set('runners', runners);
    };
    runners.get = function() {
      return localStorageService.get('runners');
    };
    if (localStorageService.get('runners') == null) {
      $http.get('/assets/data/dummydata.json').success(function(data, success) {
        return runners.set(data);
      });
    }
    return runners;
  });

  timerApp.factory('stopwatchService', function($timeout, StringFuncs, localStorageService) {
    var timer;
    timer = {
      raceTime: null,
      raceTimeout: null
    };
    timer.start = function() {
      timer.raceTime = timer.timeFormatter();
      return timer.raceTimeout = $timeout(timer.start, 100);
    };
    timer.stop = function() {
      $timeout.cancel(timer.raceTimeout);
      return timer.raceTimeout = null;
    };
    timer.restart = function() {
      timer.stop();
      return timer.raceTime = null;
    };
    timer.timeFormatter = function(inputTime) {
      var h, m, s, timeDiff, times;
      if (inputTime == null) {
        inputTime = new Date().getTime();
      }
      timeDiff = (inputTime - localStorageService.get('raceStartTime')) / 1000;
      h = parseInt(timeDiff / 3600);
      m = parseInt((timeDiff - h * 3600) / 60);
      s = parseInt(timeDiff - h * 3600 - m * 60);
      times = [h, m, s].map(function(val, idx) {
        if (timeDiff < 0) {
          return "00";
        } else {
          return StringFuncs.padWithZeros(val);
        }
      });
      return times.join(':');
    };
    return timer;
  });

  timerApp.service('StringFuncs', function() {
    return {
      padWithZeros: function(str, digits) {
        if (digits == null) {
          digits = 2;
        }
        str = String(str);
        while (str.length < digits) {
          str = "0" + str;
        }
        return str;
      }
    };
  });

  timerApp.filter('ageGrpFilter', function() {
    return function(runners, race, gender, minAge, maxAge) {
      var r, results, _i, _len;
      if (runners == null) {
        runners = null;
      }
      if (gender == null) {
        gender = null;
      }
      if (minAge == null) {
        minAge = 0;
      }
      if (maxAge == null) {
        maxAge = 100;
      }
      if (runners != null) {
        for (_i = 0, _len = runners.length; _i < _len; _i++) {
          r = runners[_i];
          results = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = runners.length; _j < _len1; _j++) {
              r = runners[_j];
              if (r.age >= minAge && r.age <= maxAge && r.race === race && r.time !== null && (r.gender === gender || gender === null)) {
                _results.push(r);
              }
            }
            return _results;
          })();
          results.sort(function(a, b) {
            if (a.time < b.time) {
              return 0;
            } else {
              return 1;
            }
          });
        }
        return results;
      }
    };
  });

  navCtrl = timerApp.controller('navCtrl', function($scope, $location) {
    $scope.gotoReg = function(e) {
      return $location.path('/registration');
    };
    return $scope.gotoTimer = function(e) {
      return $location.path('/timer');
    };
  });

  timerCtrl = timerApp.controller('timerCtrl', function($scope, Runners, localStorageService, stopwatchService, ageGrpFilterFilter) {
    $scope.runners = Runners.get();
    $scope.timerIsActive = localStorageService.get('raceStartTime') != null;
    $scope.raceIsOver = localStorageService.get('raceEndTime') != null;
    $scope.bibNo = null;
    $scope.stopwatch = stopwatchService;
    if ($scope.timerIsActive) {
      $scope.stopwatch.start();
    }
    $scope.startTimer = function() {
      var d;
      d = new Date();
      localStorageService.set('raceStartTime', d.getTime());
      $scope.timerIsActive = true;
      return $scope.stopwatch.start();
    };
    $scope.stopTimer = function() {
      var d;
      if (confirm('Are you sure? This will end the race!')) {
        $scope.raceIsOver = true;
        $scope.timerIsActive = false;
        d = new Date();
        localStorageService.set('raceEndTime', d.getTime());
        $scope.stopwatch.stop();
        return Runners.set($scope.runners);
      }
    };
    $scope.restartRace = function() {
      var r, _i, _len, _ref;
      if (confirm('Are you sure? This will restart the race and erase everyone\'s times!')) {
        $scope.raceIsOver = false;
        $scope.timerIsActive = false;
        $scope.stopwatch.restart();
        localStorageService.remove('raceStartTime');
        localStorageService.remove('raceEndTime');
        _ref = $scope.runners;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          r.time = null;
        }
        return Runners.set($scope.runners);
      }
    };
    return $scope.recordRunnerTime = function() {
      var i, r, _i, _len, _ref;
      _ref = $scope.runners;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        r = _ref[i];
        if (parseInt(r.bib) === $scope.bibNo) {
          $scope.runners[i].time = $scope.stopwatch.timeFormatter();
        }
      }
      return Runners.set($scope.runners);
    };
  });

  regCtrl = timerApp.controller('regCtrl', function($scope, Runners) {
    $scope.runners = Runners.get();
    $scope.currentActivity = 'Add';
    $scope.saveCommand = 'Register';
    $scope.isNew = true;
    $scope.$watch('isNew', function() {
      $scope.currentActivity = $scope.isNew ? 'Add' : 'Edit';
      $scope.saveCommand = $scope.isNew ? 'Register' : 'Done';
      return $scope.isEditing = !$scope.isNew;
    });
    $scope.findRunner = function(bib) {
      var runner, _i, _len, _ref, _results;
      _ref = $scope.runners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        runner = _ref[_i];
        if (runner.bib === bib) {
          _results.push(runner);
        }
      }
      return _results;
    };
    $scope.createNewID = function() {
      var bibs;
      bibs = $scope.runners.map(function(obj, i) {
        return obj.bib;
      });
      return Math.max.apply(Math, bibs) + 1;
    };
    $scope.saveRunner = function() {
      if ($scope.runner.bib == null) {
        $scope.runner.bib = $scope.createNewID();
        $scope.runner.time = null;
        $scope.runners.push($scope.runner);
      }
      $scope.runner = {
        race: "5K",
        gender: "F"
      };
      $scope.isNew = true;
      return Runners.set($scope.runners);
    };
    $scope.loadRunner = function(id) {
      $scope.runner = $scope.findRunner(id)[0];
      return $scope.isNew = $scope.runner ? false : true;
    };
    return $scope.deleteRunner = function(id) {
      var index;
      $scope.runner = $scope.findRunner(id);
      index = $scope.runners.indexOf($scope.runner);
      $scope.runners.splice(index, 1);
      Runners.set($scope.runners);
      return $scope.isNew = true;
    };
  });

}).call(this);
